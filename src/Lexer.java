// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Brandon/IdeaProjects/LexicalAnalyzer/src/toy.flex

import java.util.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\2\0\1\10\1\11\1\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\11\23"+
    "\1\0\1\24\1\25\1\26\1\27\2\0\4\30\1\31"+
    "\1\30\21\32\1\33\2\32\1\34\1\0\1\35\1\0"+
    "\1\36\1\0\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\32\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\32\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\32\1\66\1\67\1\70\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\15\23\1\26\1\1\1\27\1\30\1\0\1\31\1\32"+
    "\1\0\1\33\1\34\1\0\1\35\1\21\1\36\10\23"+
    "\1\37\12\23\1\40\1\0\1\34\1\0\1\34\7\23"+
    "\1\41\1\23\1\42\1\43\10\23\1\44\1\0\4\23"+
    "\1\45\4\23\1\46\4\23\1\47\1\50\2\23\1\51"+
    "\1\52\11\23\1\53\1\23\1\54\5\23\1\55\1\56"+
    "\1\57\1\60\1\61\3\23\1\62\2\23\1\63\1\23"+
    "\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\71\0\162\0\253\0\344\0\71"+
    "\0\u011d\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u0156\0\u018f\0\u01c8\0\71\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\71\0\71\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\71"+
    "\0\u05ca\0\71\0\71\0\344\0\71\0\71\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\71\0\71\0\71\0\u06e7\0\u0720\0\u0759"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u02ac\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\71\0\u0ae9\0\u0b22\0\u0b5b\0\u06ae\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u02ac\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\71\0\u0b22\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u02ac\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u02ac\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u02ac\0\u02ac\0\u1242\0\u127b\0\u02ac\0\u02ac\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u02ac"+
    "\0\u14b5\0\u02ac\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u02ac"+
    "\0\u02ac\0\u02ac\0\u02ac\0\u02ac\0\u160b\0\u1644\0\u167d\0\u02ac"+
    "\0\u16b6\0\u16ef\0\u02ac\0\u1728\0\u02ac\0\u02ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\4\30\1\31\1\32\1\2\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\2\30\1\40\3\30\1\41\1\30\1\42"+
    "\1\43\1\44\1\45\1\30\1\46\1\47\2\30\1\50"+
    "\1\51\1\52\73\0\1\4\114\0\1\53\42\0\2\54"+
    "\1\0\2\54\1\0\1\54\1\55\61\54\11\0\1\56"+
    "\73\0\1\57\4\0\1\60\67\0\1\61\1\0\2\23"+
    "\7\0\1\62\30\0\1\62\24\0\1\61\1\0\2\23"+
    "\73\0\1\63\70\0\1\64\70\0\1\65\64\0\2\30"+
    "\4\0\4\30\2\0\30\30\25\0\2\30\4\0\4\30"+
    "\2\0\16\30\1\66\1\30\1\67\7\30\25\0\2\30"+
    "\4\0\4\30\2\0\13\30\1\70\14\30\25\0\2\30"+
    "\4\0\4\30\2\0\16\30\1\71\11\30\25\0\2\30"+
    "\4\0\4\30\2\0\13\30\1\72\12\30\1\73\1\30"+
    "\25\0\2\30\4\0\4\30\2\0\1\30\1\74\14\30"+
    "\1\75\11\30\25\0\2\30\4\0\4\30\2\0\6\30"+
    "\1\76\5\30\1\77\1\100\12\30\25\0\2\30\4\0"+
    "\4\30\2\0\5\30\1\101\15\30\1\102\4\30\25\0"+
    "\2\30\4\0\4\30\2\0\20\30\1\103\7\30\25\0"+
    "\2\30\4\0\4\30\2\0\5\30\1\104\22\30\25\0"+
    "\2\30\4\0\4\30\2\0\22\30\1\105\5\30\25\0"+
    "\2\30\4\0\4\30\2\0\20\30\1\106\7\30\25\0"+
    "\2\30\4\0\4\30\2\0\16\30\1\107\11\30\25\0"+
    "\2\30\4\0\4\30\2\0\10\30\1\110\17\30\72\0"+
    "\1\111\1\0\14\57\1\112\54\57\2\60\4\0\63\60"+
    "\22\0\2\113\5\0\1\114\11\0\1\114\47\0\2\115"+
    "\4\0\2\115\5\0\6\115\46\0\2\30\4\0\4\30"+
    "\2\0\16\30\1\116\11\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\117\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\120\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\23\30\1\121\4\30\25\0\2\30\4\0\4\30"+
    "\2\0\21\30\1\122\6\30\25\0\2\30\4\0\4\30"+
    "\2\0\22\30\1\123\5\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\124\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\20\30\1\125\7\30\25\0\2\30\4\0\4\30"+
    "\2\0\17\30\1\126\10\30\25\0\2\30\4\0\4\30"+
    "\2\0\22\30\1\127\5\30\25\0\2\30\4\0\4\30"+
    "\2\0\25\30\1\130\2\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\131\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\11\30\1\132\16\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\133\20\30\1\134\5\30\25\0\2\30"+
    "\4\0\4\30\2\0\20\30\1\135\7\30\25\0\2\30"+
    "\4\0\4\30\2\0\23\30\1\136\4\30\25\0\2\30"+
    "\4\0\4\30\2\0\11\30\1\137\16\30\25\0\2\30"+
    "\4\0\4\30\2\0\11\30\1\140\16\30\3\0\14\57"+
    "\1\112\4\57\1\141\47\57\22\0\2\113\62\0\1\142"+
    "\1\0\1\142\2\0\2\113\67\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\143\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\144\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\21\30\1\145\6\30\25\0\2\30\4\0\4\30"+
    "\2\0\2\30\1\146\25\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\147\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\150\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\21\30\1\136\6\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\151\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\152\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\153\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\154\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\155\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\4\30\1\156\23\30\25\0\2\30\4\0\4\30"+
    "\2\0\23\30\1\157\4\30\25\0\2\30\4\0\4\30"+
    "\2\0\11\30\1\160\16\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\161\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\4\30\1\162\23\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\163\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\164\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\12\30\1\165\15\30\25\0\2\30\4\0\4\30"+
    "\2\0\21\30\1\166\6\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\167\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\170\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\171\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\20\30\1\172\7\30\25\0\2\30\4\0\4\30"+
    "\2\0\20\30\1\173\7\30\25\0\2\30\4\0\4\30"+
    "\2\0\22\30\1\174\5\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\175\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\20\30\1\176\7\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\177\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\200\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\201\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\202\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\4\30\1\203\23\30\25\0\2\30\4\0\4\30"+
    "\2\0\14\30\1\204\13\30\25\0\2\30\4\0\4\30"+
    "\2\0\6\30\1\205\21\30\25\0\2\30\4\0\4\30"+
    "\2\0\20\30\1\206\7\30\25\0\2\30\4\0\4\30"+
    "\2\0\13\30\1\207\14\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\210\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\211\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\7\30\1\212\20\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\213\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\21\30\1\214\6\30\25\0\2\30\4\0\4\30"+
    "\2\0\5\30\1\215\22\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\216\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\1\30\1\217\26\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\220\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\15\30\1\221\12\30\25\0\2\30\4\0\4\30"+
    "\2\0\3\30\1\222\24\30\25\0\2\30\4\0\4\30"+
    "\2\0\27\30\1\223\25\0\2\30\4\0\4\30\2\0"+
    "\22\30\1\224\5\30\25\0\2\30\4\0\4\30\2\0"+
    "\5\30\1\225\22\30\25\0\2\30\4\0\4\30\2\0"+
    "\21\30\1\226\6\30\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5985];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\1\11\1\1\7\11\3\1\1\11"+
    "\4\1\2\11\15\1\1\11\1\1\2\11\1\0\2\11"+
    "\1\0\2\1\1\0\3\11\23\1\1\11\1\0\1\1"+
    "\1\0\24\1\1\11\1\0\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[150];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

// Enumerator for tokens
enum token {
  _boolean(0),
  _break(1),
  _class(2),
  _double(3),
  _else(4),
  _extends(5),
  _for(6),
  _if(7),
  _implements(8),
  _int(9),
  _interface(10),
  _new(11),
  _newarray(12),
  _null(13),
  _println(14),
  _readln(15),
  _return(16),
  _string(17),
  _void(18),
  _while(19),
  _plus(20),
  _minus(21),
  _multiplication(22),
  _division(23),
  _mod(24),
  _less(25),
  _lessequal(26),
  _greater(27),
  _greaterequal(28),
  _equal(29),
  _notequal(30),
  _and(31),
  _or(32),
  _not(33),
  _assignop(34),
  _semicolon(35),
  _comma(36),
  _period(37),
  _leftparen(38),
  _rightparen(39),
  _leftbracket(40),
  _rightbracket(41),
  _leftbrace(42),
  _rightbrace(43),
  _intconstant(44),
  _doubleconstant(45),
  _stringconstant(46),
  _booleanconstant(47),
  _id(48);

  private final int tokenid;

  private token(int tokenid) {
   this.tokenid = tokenid;
  }

  public int getValue(){
    return tokenid;
  }
}

// Max size of Trie Symbol & Next Array
final int MAX = 1000;
final int ALPHASIZE = 52;


// Trie Data Structure
private class Trie {

  private int tSwitch[] = new int[ALPHASIZE];
  private char tSymbol[] = new char[MAX];
  private int tNext[] = new int[MAX];
  private int symbolEnd = 0;

  public Trie() {
    // Initialize arrays
    Arrays.fill(tSwitch, -1);
    Arrays.fill(tSymbol, '-');
    Arrays.fill(tNext, -1);

    // Insert all reserved words into Trie first
    insert("boolean", '!');
    insert("break", '#');
    insert("class", '$');
    insert("double", '%');
    insert("else", '^');
    insert("extends", '&');
    insert("false", '>');
    insert("for", '(');
    insert("if", ')');
    insert("implements", '-');
    insert("int", '+');
    insert("interface", '=');
    insert("new", '{');
    insert("newarray", '}');
    insert("null", '|');
    insert("println", '\\');
    insert("readln", '/');
    insert("return", '?');
    insert("string", '*');
    insert("true", '<');
    insert("void", '.');
    insert("while", ',');
  }

  // Get int representation of characters
  private int getValOfSymbol(char c) {
    return (Character.isUpperCase(c)) ? ((int)c - 65) : (((int)c - 97) + 26);
  }
  // Gets char representation of int based on above
  // (anything larger than 51 returns 'z', smaller than 0 returns 'A')
  private char getSymOfVal(int c) {
    if(c > 51)
      return 'z';
    if(c > 25)
      return (char)(c + 97 - 26);
    else if(c < 0)
      return 'A';
    else
      return (char)(c + 65);
  }

  // Returns true if c is a valid deliminator, false otherwise
  private boolean isDelim(char c) {
    if(c == '!' /*boolean*/ || c == '#' /*break*/ || c == '$' /*class*/ || c == '%' /*double*/ || c == '^' /*else*/
         || c == '&' /*extends*/ || c == '>' /*false*/ || c == '(' /*for*/ || c == ')' /*if*/ || c == '-' /*implements*/
         || c == '+' /*int*/ || c == '=' /*interface*/ || c == '{' /*new*/ || c == '}' /*newarray*/ || c == '|' /*null*/
         || c == '\\' /*println*/ || c == '/' /*readln*/ || c == '?' /*return*/ || c == '*' /*string*/ || c == '<' /*true*/
         || c == '.' /*void*/ || c == ',' /*while*/ || c == '@' /*id*/ )
      return true;
    else
      return false;
  }

  // Creates an id, s, at index in tSymbol, if wholeWord ignores first character and sets tSwitch
  private void createId(String s, int size, int index, boolean wholeWord) {
    int sInd = 0;
    if(wholeWord){
      tSwitch[getValOfSymbol(s.charAt(sInd))] = index;
      sInd++;
      size--;
    }

    for(int i = 0; i < size; i++) {
      tSymbol[index + i] = s.charAt(sInd);
      sInd++;
    }
    // Mark new end of tSymbol
    symbolEnd = index + size;
  }

  // Search through Trie and insert string s with deliminator delim if not found
  // Will return false if no insertion is needed, true if s is inserted into Trie
  public boolean insert(String s, char delim) {
    s = s + delim;
    int sInd = 0;
    int ptr = tSwitch[getValOfSymbol(s.charAt(sInd))];
    if(ptr == -1) {
      createId(s, s.length(), symbolEnd, true);
      return true; // Successful insertion
    } else {
      sInd++;
      boolean exit = false;
      while(!exit){
        if(tSymbol[ptr] == s.charAt(sInd)){
          if(!isDelim(s.charAt(sInd))){
            // If sInd isn't at the end of the id check next symbol in tSymbol with next char in s
            ptr++;
            sInd++;
          } else {
            // If sInd is at the end of id, and it all matched & ends in Trie, id's already present, exit
            exit = true;
          }
        } else if(tNext[ptr] != -1) {
          // If s.charAt(sInd) doesn't match tSymbol[ptr] check next for where to continue if it's defined
          ptr = tNext[ptr];
        } else {
          // New id
          tNext[ptr] = symbolEnd;
          createId(s.substring(sInd, s.length()), s.substring(sInd, s.length()).length(), symbolEnd, false);
          return true; // Successful insertion
        }
      }
    }
    return false; // If insertion is not needed
  }

  public void print() {
    System.out.println();

    // Print switch
    boolean labelFlag = true, symFlag;
    int counter = 0;
    int rowSize = 20;

    while(counter < ALPHASIZE) {
      if(counter + 20 > ALPHASIZE) {
        rowSize = ALPHASIZE - counter;
      }
      for(int i = 0; i < rowSize; i++) {
        // For new lines
        if((i + counter) % 20 == 0) {
          if(labelFlag) {
            System.out.println();
            System.out.format("%-8s", "");
          } else {
            System.out.println();
            System.out.format("%-8s", "switch:");
          }
        }

        if(labelFlag)
          System.out.format("%5s", getSymOfVal(i + counter));
        else
          System.out.format("%5d", tSwitch[i + counter]);
      }
      // If the end of a switch[i] row add 20 to the counter and move on to the next actual row
      if(!labelFlag) {
        counter = counter + 20;
        System.out.println();
      }
      // Flip labelFlag switch
      labelFlag = !labelFlag;
    }

    System.out.println();
    // Print Symbol and Next
    // Reset variables for reuse
    rowSize = 20;
    counter = 0;
    labelFlag = true;
    symFlag  = true;

    while(counter < symbolEnd) {
      if(counter + 20 > symbolEnd) {
        rowSize = symbolEnd - counter;
      }
      for(int i = 0; i < rowSize; i++) {
        // For new lines and row header
        if((i + counter) % 20 == 0) {
          if(labelFlag) {
            System.out.println();
            System.out.format("%-8s", "");
          } else if(symFlag) {
            System.out.println();
            System.out.format("%-8s", "symbol:");
          } else {
            System.out.println();
            System.out.format("%-8s", "next:");
          }
        }

        if(labelFlag) {
          System.out.format("%5s", (i + counter));
        } else if(symFlag) {
          System.out.format("%5s", tSymbol[i + counter]);
        } else {
          System.out.format("%5d", tNext[i + counter]);
        }
      }

      // If at the end of a next[] row, add 20 to the counter and move on to the next actual row
      if(!labelFlag && !symFlag) {
        counter = counter + 20;
        System.out.println();
      }
      // End of label row, switch off label flag
      if(labelFlag) {
        labelFlag = !labelFlag;
      // End of symbol row, switch off symbol flag
      } else if(symFlag) {
        symFlag = !symFlag;
      // End of next row, switch on lbl and switch flags
      } else {
        labelFlag = !labelFlag;
        symFlag = !symFlag;
      }
    }
  }
}

Trie symbolTable = new Trie();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  symbolTable.print();
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 54: break;
          case 2:
            { 
            }
            // fall through
          case 55: break;
          case 3:
            { System.out.println();
            }
            // fall through
          case 56: break;
          case 4:
            { System.out.print("not "); return token._not.getValue();
            }
            // fall through
          case 57: break;
          case 5:
            { System.out.print("mod "); return token._mod.getValue();
            }
            // fall through
          case 58: break;
          case 6:
            { System.out.print("leftparen "); return token._leftparen.getValue();
            }
            // fall through
          case 59: break;
          case 7:
            { System.out.print("rightparen "); return token._rightparen.getValue();
            }
            // fall through
          case 60: break;
          case 8:
            { System.out.print("multiplication "); return token._multiplication.getValue();
            }
            // fall through
          case 61: break;
          case 9:
            { System.out.print("plus "); return token._plus.getValue();
            }
            // fall through
          case 62: break;
          case 10:
            { System.out.print("comma "); return token._comma.getValue();
            }
            // fall through
          case 63: break;
          case 11:
            { System.out.print("minus "); return token._minus.getValue();
            }
            // fall through
          case 64: break;
          case 12:
            { System.out.print("period "); return token._period.getValue();
            }
            // fall through
          case 65: break;
          case 13:
            { System.out.print("division "); return token._division.getValue();
            }
            // fall through
          case 66: break;
          case 14:
            { System.out.print("intconstant "); return token._intconstant.getValue();
            }
            // fall through
          case 67: break;
          case 15:
            { System.out.print("semicolon "); return token._semicolon.getValue();
            }
            // fall through
          case 68: break;
          case 16:
            { System.out.print("less "); return token._less.getValue();
            }
            // fall through
          case 69: break;
          case 17:
            { System.out.print("equal "); return token._equal.getValue();
            }
            // fall through
          case 70: break;
          case 18:
            { System.out.print("greater "); return token._greater.getValue();
            }
            // fall through
          case 71: break;
          case 19:
            { symbolTable.insert(yytext(), '@');
  System.out.print("identifier "); return token._id.getValue();
            }
            // fall through
          case 72: break;
          case 20:
            { System.out.print("leftbracket "); return token._leftbracket.getValue();
            }
            // fall through
          case 73: break;
          case 21:
            { System.out.print("rightbracket "); return token._rightbracket.getValue();
            }
            // fall through
          case 74: break;
          case 22:
            { System.out.print("leftbrace "); return token._leftbrace.getValue();
            }
            // fall through
          case 75: break;
          case 23:
            { System.out.print("rightbrace "); return token._rightbrace.getValue();
            }
            // fall through
          case 76: break;
          case 24:
            { System.out.print("notequal "); return token._notequal.getValue();
            }
            // fall through
          case 77: break;
          case 25:
            { System.out.print("stringconstant "); return token._stringconstant.getValue();
            }
            // fall through
          case 78: break;
          case 26:
            { System.out.print("and "); return token._and.getValue();
            }
            // fall through
          case 79: break;
          case 27:
            { System.out.print("comment ");
            }
            // fall through
          case 80: break;
          case 28:
            { System.out.print("doubleconstant "); return token._doubleconstant.getValue();
            }
            // fall through
          case 81: break;
          case 29:
            { System.out.print("lessequal "); return token._lessequal.getValue();
            }
            // fall through
          case 82: break;
          case 30:
            { System.out.print("greaterequal "); return token._greaterequal.getValue();
            }
            // fall through
          case 83: break;
          case 31:
            { System.out.print("if "); return token._if.getValue();
            }
            // fall through
          case 84: break;
          case 32:
            { System.out.print("or "); return token._or.getValue();
            }
            // fall through
          case 85: break;
          case 33:
            { System.out.print("for "); return token._for.getValue();
            }
            // fall through
          case 86: break;
          case 34:
            { System.out.print("int "); return token._int.getValue();
            }
            // fall through
          case 87: break;
          case 35:
            { System.out.print("new "); return token._new.getValue();
            }
            // fall through
          case 88: break;
          case 36:
            { System.out.print("multi-line-comment ");
            }
            // fall through
          case 89: break;
          case 37:
            { System.out.print("else "); return token._else.getValue();
            }
            // fall through
          case 90: break;
          case 38:
            { System.out.print("null "); return token._null.getValue();
            }
            // fall through
          case 91: break;
          case 39:
            { System.out.print("booleanconstant "); return token._booleanconstant.getValue();
            }
            // fall through
          case 92: break;
          case 40:
            { System.out.print("void "); return token._void.getValue();
            }
            // fall through
          case 93: break;
          case 41:
            { System.out.print("break "); return token._break.getValue();
            }
            // fall through
          case 94: break;
          case 42:
            { System.out.print("class "); return token._class.getValue();
            }
            // fall through
          case 95: break;
          case 43:
            { System.out.print("while "); return token._while.getValue();
            }
            // fall through
          case 96: break;
          case 44:
            { System.out.print("double "); return token._double.getValue();
            }
            // fall through
          case 97: break;
          case 45:
            { System.out.print("readln "); return token._readln.getValue();
            }
            // fall through
          case 98: break;
          case 46:
            { System.out.print("return "); return token._return.getValue();
            }
            // fall through
          case 99: break;
          case 47:
            { System.out.print("string "); return token._string.getValue();
            }
            // fall through
          case 100: break;
          case 48:
            { System.out.print("boolean "); return token._boolean.getValue();
            }
            // fall through
          case 101: break;
          case 49:
            { System.out.print("extends "); return token._extends.getValue();
            }
            // fall through
          case 102: break;
          case 50:
            { System.out.print("println "); return token._println.getValue();
            }
            // fall through
          case 103: break;
          case 51:
            { System.out.print("newarrray "); return token._newarray.getValue();
            }
            // fall through
          case 104: break;
          case 52:
            { System.out.print("interface "); return token._interface.getValue();
            }
            // fall through
          case 105: break;
          case 53:
            { System.out.print("implements "); return token._implements.getValue();
            }
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
