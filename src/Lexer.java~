// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Brandon/IdeaProjects/LexicalAnalyzer/src/toy.flex

import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\0\1\22"+
    "\1\23\1\24\1\25\2\0\4\26\1\27\1\26\21\30"+
    "\1\31\2\30\1\32\1\0\1\33\1\0\1\34\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\30\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\30\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\30\1\64\1\0\1\65\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\15\22\1\25"+
    "\1\26\1\27\1\0\1\30\2\0\1\31\2\0\1\32"+
    "\1\33\1\34\10\22\1\35\11\22\2\0\2\2\1\0"+
    "\1\31\1\15\7\22\1\36\1\22\1\37\10\22\1\0"+
    "\1\40\3\22\1\41\10\22\1\42\1\43\1\22\1\44"+
    "\1\45\11\22\1\46\1\47\5\22\1\50\1\51\1\52"+
    "\1\53\3\22\1\54\2\22\1\55\1\22\1\56\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\66\0\242\0\330\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u010e\0\u0144"+
    "\0\u017a\0\66\0\u01b0\0\u01e6\0\u021c\0\u0252\0\66\0\66"+
    "\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402"+
    "\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\66\0\66\0\66"+
    "\0\330\0\66\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\66"+
    "\0\66\0\66\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0252\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\66\0\u0a56"+
    "\0\u0a8c\0\u0a8c\0\u061e\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0252\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0252\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0252\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u0252\0\u0252\0\u10e0\0\u0252\0\u0252"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u0252\0\u0252\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4"+
    "\0\u0252\0\u0252\0\u0252\0\u0252\0\u140a\0\u1440\0\u1476\0\u0252"+
    "\0\u14ac\0\u14e2\0\u0252\0\u1518\0\u0252\0\u0252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\4\26\1\27\1\30"+
    "\1\2\1\26\1\31\1\32\1\33\1\34\1\35\2\26"+
    "\1\36\3\26\1\37\1\26\1\40\1\41\1\42\1\43"+
    "\1\26\1\44\1\45\2\26\1\46\1\47\67\0\1\3"+
    "\110\0\1\50\41\0\2\51\1\0\3\51\1\52\57\51"+
    "\12\0\1\53\4\0\1\54\64\0\1\55\1\0\2\21"+
    "\5\0\1\56\1\0\1\57\7\0\1\56\20\0\1\57"+
    "\21\0\1\55\1\0\2\21\5\0\1\56\11\0\1\56"+
    "\50\0\1\60\65\0\1\61\65\0\1\62\61\0\2\26"+
    "\4\0\4\26\2\0\30\26\22\0\2\26\4\0\4\26"+
    "\2\0\16\26\1\63\1\26\1\64\7\26\22\0\2\26"+
    "\4\0\4\26\2\0\13\26\1\65\14\26\22\0\2\26"+
    "\4\0\4\26\2\0\16\26\1\66\11\26\22\0\2\26"+
    "\4\0\4\26\2\0\13\26\1\67\12\26\1\70\1\26"+
    "\22\0\2\26\4\0\4\26\2\0\1\26\1\71\14\26"+
    "\1\72\11\26\22\0\2\26\4\0\4\26\2\0\6\26"+
    "\1\73\5\26\1\74\1\75\12\26\22\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\76\22\26\22\0\2\26\4\0"+
    "\4\26\2\0\20\26\1\77\7\26\22\0\2\26\4\0"+
    "\4\26\2\0\5\26\1\100\22\26\22\0\2\26\4\0"+
    "\4\26\2\0\22\26\1\101\5\26\22\0\2\26\4\0"+
    "\4\26\2\0\20\26\1\102\7\26\22\0\2\26\4\0"+
    "\4\26\2\0\16\26\1\103\11\26\22\0\2\26\4\0"+
    "\4\26\2\0\10\26\1\104\17\26\2\0\12\105\1\106"+
    "\53\105\2\54\1\107\1\54\1\110\61\54\20\0\2\55"+
    "\5\0\1\56\11\0\1\56\37\0\1\111\1\0\1\111"+
    "\2\0\2\112\64\0\2\113\4\0\2\113\5\0\6\113"+
    "\43\0\2\26\4\0\4\26\2\0\16\26\1\114\11\26"+
    "\22\0\2\26\4\0\4\26\2\0\5\26\1\115\22\26"+
    "\22\0\2\26\4\0\4\26\2\0\1\26\1\116\26\26"+
    "\22\0\2\26\4\0\4\26\2\0\23\26\1\117\4\26"+
    "\22\0\2\26\4\0\4\26\2\0\21\26\1\120\6\26"+
    "\22\0\2\26\4\0\4\26\2\0\22\26\1\121\5\26"+
    "\22\0\2\26\4\0\4\26\2\0\13\26\1\122\14\26"+
    "\22\0\2\26\4\0\4\26\2\0\20\26\1\123\7\26"+
    "\22\0\2\26\4\0\4\26\2\0\17\26\1\124\10\26"+
    "\22\0\2\26\4\0\4\26\2\0\22\26\1\125\5\26"+
    "\22\0\2\26\4\0\4\26\2\0\25\26\1\126\2\26"+
    "\22\0\2\26\4\0\4\26\2\0\11\26\1\127\16\26"+
    "\22\0\2\26\4\0\4\26\2\0\1\26\1\130\20\26"+
    "\1\131\5\26\22\0\2\26\4\0\4\26\2\0\20\26"+
    "\1\132\7\26\22\0\2\26\4\0\4\26\2\0\23\26"+
    "\1\133\4\26\22\0\2\26\4\0\4\26\2\0\11\26"+
    "\1\134\16\26\22\0\2\26\4\0\4\26\2\0\11\26"+
    "\1\135\16\26\2\0\12\105\1\136\53\105\12\0\1\106"+
    "\4\0\1\107\50\0\1\107\103\0\2\112\64\0\2\26"+
    "\4\0\4\26\2\0\13\26\1\137\14\26\22\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\140\26\26\22\0\2\26"+
    "\4\0\4\26\2\0\21\26\1\141\6\26\22\0\2\26"+
    "\4\0\4\26\2\0\2\26\1\142\25\26\22\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\143\22\26\22\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\144\22\26\22\0\2\26"+
    "\4\0\4\26\2\0\21\26\1\133\6\26\22\0\2\26"+
    "\4\0\4\26\2\0\13\26\1\145\14\26\22\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\146\22\26\22\0\2\26"+
    "\4\0\4\26\2\0\1\26\1\147\26\26\22\0\2\26"+
    "\4\0\4\26\2\0\15\26\1\150\12\26\22\0\2\26"+
    "\4\0\4\26\2\0\4\26\1\151\23\26\22\0\2\26"+
    "\4\0\4\26\2\0\23\26\1\152\4\26\22\0\2\26"+
    "\4\0\4\26\2\0\11\26\1\153\16\26\22\0\2\26"+
    "\4\0\4\26\2\0\5\26\1\154\22\26\22\0\2\26"+
    "\4\0\4\26\2\0\4\26\1\155\23\26\22\0\2\26"+
    "\4\0\4\26\2\0\13\26\1\156\14\26\2\0\12\105"+
    "\1\136\4\105\1\107\46\105\20\0\2\26\4\0\4\26"+
    "\2\0\12\26\1\157\15\26\22\0\2\26\4\0\4\26"+
    "\2\0\21\26\1\160\6\26\22\0\2\26\4\0\4\26"+
    "\2\0\13\26\1\161\14\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\162\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\163\22\26\22\0\2\26\4\0\4\26"+
    "\2\0\20\26\1\164\7\26\22\0\2\26\4\0\4\26"+
    "\2\0\20\26\1\165\7\26\22\0\2\26\4\0\4\26"+
    "\2\0\22\26\1\166\5\26\22\0\2\26\4\0\4\26"+
    "\2\0\13\26\1\167\14\26\22\0\2\26\4\0\4\26"+
    "\2\0\20\26\1\170\7\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\171\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\172\22\26\22\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\173\22\26\22\0\2\26\4\0\4\26"+
    "\2\0\4\26\1\174\23\26\22\0\2\26\4\0\4\26"+
    "\2\0\14\26\1\175\13\26\22\0\2\26\4\0\4\26"+
    "\2\0\6\26\1\176\21\26\22\0\2\26\4\0\4\26"+
    "\2\0\20\26\1\177\7\26\22\0\2\26\4\0\4\26"+
    "\2\0\13\26\1\200\14\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\201\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\202\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\7\26\1\203\20\26\22\0\2\26\4\0\4\26"+
    "\2\0\21\26\1\204\6\26\22\0\2\26\4\0\4\26"+
    "\2\0\5\26\1\205\22\26\22\0\2\26\4\0\4\26"+
    "\2\0\1\26\1\206\26\26\22\0\2\26\4\0\4\26"+
    "\2\0\1\26\1\207\26\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\210\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\15\26\1\211\12\26\22\0\2\26\4\0\4\26"+
    "\2\0\3\26\1\212\24\26\22\0\2\26\4\0\4\26"+
    "\2\0\27\26\1\213\22\0\2\26\4\0\4\26\2\0"+
    "\22\26\1\214\5\26\22\0\2\26\4\0\4\26\2\0"+
    "\5\26\1\215\22\26\22\0\2\26\4\0\4\26\2\0"+
    "\21\26\1\216\6\26\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5454];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\10\11\3\1\1\11"+
    "\4\1\2\11\15\1\3\11\1\0\1\11\2\0\1\1"+
    "\2\0\3\11\22\1\2\0\1\11\1\1\1\0\24\1"+
    "\1\0\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

  public enum tokens {
    t_bool, t_break, t_class, t_double,
    t_else, t_extends, t_for, t_if, t_implements,
    t_int, t_interface, t_newarray, t_println,
    t_readln, t_return, t_string, t_void, t_while,
    t_plus, t_minus, t_multiplication, t_division,
    t_mod, t_less, t_lessequal, t_greater, t_greaterequal,
    t_equal, t_notequal, t_assignop, t_semicolon, t_comma,
    t_period, t_leftparen, t_rightparen, t_leftbracket,
    t_rightbracket, t_leftbrace, t_rightbrace, t_boolconstant,
    t_intconstant, t_doubleconstant, t_stringconstant, t_id
  }

  public class symbol_table {
    public int [] control = new int[52];
    public ArrayList<Integer> next = new ArrayList<Integer>();
    public ArrayList<Character> symbol = new ArrayList<Character>();

    public symbol_table() {
        for (int i = 0; i < this.control.length; ++i) {
            this.control[i] = -1;
        }
    }
  }

  public symbol_table s = new symbol_table();

  // Return array index of character
  public int alphaIndex(char c) {
    int v = c;
    if (v >= 97) {
        return v - 97 + 26;
    }
    return v - 65;
  }

  public void trie(String str) {
    int value = alphaIndex(str.charAt(0));
    int ptr = s.control[value];

    if (ptr == -1) { // Undefined
        // point to last
        s.control[value] = s.symbol.size();
        // add the rest of the characters
        for (int i = 1; i < str.length(); ++i) {
            s.symbol.add(str.charAt(i));
        }
        s.symbol.add('@');
    }
    else { // Defined

        int i = 1; // 2nd character, 'i' is the symbol counter
        boolean exit = false;

        if(str.length() == 1) {
            return;
        }

        while(!exit) {
            if (s.symbol.get(ptr) == str.charAt(i)) {
                // if endmarker
                if(str.length() -1 <= i) {
                    exit = true;
                    break;
                }
                i++;
                ptr++;
            }
            else if((s.next.size() > ptr) && (s.next.get(ptr) != -1)) {
                ptr = s.next.get(ptr);
            }
            else {

                while(s.next.size() <= ptr) {
                    s.next.add(-1);
                } // grow the (next) array

                // Set next available which will
                // always be size() (dynamically allocated)
                s.next.set(ptr,s.symbol.size());

                while(i < str.length()) {
                    s.symbol.add(str.charAt(i++));
                }
                s.symbol.add('@');

                exit = true;
                break;
            }
        }


    }

  }

    public void printControl(int head, int tail) {
        System.out.printf("%-10s", "switch:");
        int v = 0;
        for (; head < tail; ++head) {
            v = s.control[head];
            if (v == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", v);
            }
        }
        System.out.println("\n");
    }

    public void printSymbol(int head, int tail) {
        System.out.printf("%-10s", "symbol:");
        for(int i = head; i < tail; ++i) {
            System.out.printf("%c   ", s.symbol.get(i));
        }
        System.out.println();
    }

    public void printNext(int head, int tail) {
        System.out.printf("%-10s", "next:");
        int v = 0;
        for (int i = head; i < tail; ++i) {
            v = s.next.get(i);
            if (v == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", v);
            }
        }
        System.out.println("\n");

    }

    private void equalizeNext() {
        if (s.symbol.size() > s.next.size()) {
            while (s.next.size() != s.symbol.size()) {
                s.next.add(-1);
            }
        }
    }

    public void printTable() {
        String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        System.out.printf("%-10s","");
        int head = 0;
        int i = 0;
        for (; i < 52; ++i) {
            if ((i+1)%20 == 0) {
                System.out.println();
                printControl(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%c   ", alpha.charAt(i));
        }
        System.out.println();
        printControl(head,i);

        equalizeNext();

        i = 0;
        head  = 0;
        System.out.printf("%-10s","");
        for (; i < s.symbol.size(); ++i) {
            if ((i+1)%20 == 0) {
                System.out.println();
                printSymbol(head,i);
                printNext(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%-3d ", i);
        }
        System.out.println();
        printSymbol(head,i);
        printNext(head,i);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore illegal chars */
            }
            // fall through
          case 48: break;
          case 2:
            { 
            }
            // fall through
          case 49: break;
          case 3:
            { System.out.print("\n");
            }
            // fall through
          case 50: break;
          case 4:
            { System.out.print("mod "); return tokens.t_mod.ordinal();
            }
            // fall through
          case 51: break;
          case 5:
            { System.out.print("leftparen "); return tokens.t_leftparen.ordinal();
            }
            // fall through
          case 52: break;
          case 6:
            { System.out.print("rightparen "); return tokens.t_rightparen.ordinal();
            }
            // fall through
          case 53: break;
          case 7:
            { System.out.print("multiplication "); return tokens.t_multiplication.ordinal();
            }
            // fall through
          case 54: break;
          case 8:
            { System.out.print("plus "); return tokens.t_plus.ordinal();
            }
            // fall through
          case 55: break;
          case 9:
            { System.out.print("comma "); return tokens.t_comma.ordinal();
            }
            // fall through
          case 56: break;
          case 10:
            { System.out.print("minus "); return tokens.t_minus.ordinal();
            }
            // fall through
          case 57: break;
          case 11:
            { System.out.print("period "); return tokens.t_period.ordinal();
            }
            // fall through
          case 58: break;
          case 12:
            { System.out.print("division "); return tokens.t_division.ordinal();
            }
            // fall through
          case 59: break;
          case 13:
            { System.out.print("intconstant "); return tokens.t_intconstant.ordinal();
            }
            // fall through
          case 60: break;
          case 14:
            { System.out.print("semicolon "); return tokens.t_semicolon.ordinal();
            }
            // fall through
          case 61: break;
          case 15:
            { System.out.print("less "); return tokens.t_less.ordinal();
            }
            // fall through
          case 62: break;
          case 16:
            { System.out.print("assignop "); return tokens.t_assignop.ordinal();
            }
            // fall through
          case 63: break;
          case 17:
            { System.out.print("greater "); return tokens.t_greater.ordinal();
            }
            // fall through
          case 64: break;
          case 18:
            { System.out.print("id "); trie(yytext()); return tokens.t_id.ordinal();
            }
            // fall through
          case 65: break;
          case 19:
            { System.out.print("rightbracket "); return tokens.t_rightbracket.ordinal();
            }
            // fall through
          case 66: break;
          case 20:
            { System.out.print("leftbracket "); return tokens.t_leftbracket.ordinal();
            }
            // fall through
          case 67: break;
          case 21:
            { System.out.print("leftbrace "); return tokens.t_leftbrace.ordinal();
            }
            // fall through
          case 68: break;
          case 22:
            { System.out.print("rightbrace "); return tokens.t_rightbrace.ordinal();
            }
            // fall through
          case 69: break;
          case 23:
            { System.out.print("notequal "); return tokens.t_notequal.ordinal();
            }
            // fall through
          case 70: break;
          case 24:
            { System.out.print("stringconstant "); return tokens.t_stringconstant.ordinal();
            }
            // fall through
          case 71: break;
          case 25:
            { System.out.print("doubleconstant "); return tokens.t_doubleconstant.ordinal();
            }
            // fall through
          case 72: break;
          case 26:
            { System.out.print("lessequal "); return tokens.t_lessequal.ordinal();
            }
            // fall through
          case 73: break;
          case 27:
            { System.out.print("equal "); return tokens.t_equal.ordinal();
            }
            // fall through
          case 74: break;
          case 28:
            { System.out.print("greaterequal "); return tokens.t_greaterequal.ordinal();
            }
            // fall through
          case 75: break;
          case 29:
            { System.out.printf("%s ",yytext()); return tokens.t_if.ordinal();
            }
            // fall through
          case 76: break;
          case 30:
            { System.out.printf("%s ",yytext()); return tokens.t_for.ordinal();
            }
            // fall through
          case 77: break;
          case 31:
            { System.out.printf("%s ",yytext()); return tokens.t_int.ordinal();
            }
            // fall through
          case 78: break;
          case 32:
            { System.out.printf("%s ",yytext()); return tokens.t_bool.ordinal();
            }
            // fall through
          case 79: break;
          case 33:
            { System.out.printf("%s ",yytext()); return tokens.t_else.ordinal();
            }
            // fall through
          case 80: break;
          case 34:
            { System.out.print("boolconstant "); return tokens.t_boolconstant.ordinal();
            }
            // fall through
          case 81: break;
          case 35:
            { System.out.printf("%s ",yytext()); return tokens.t_void.ordinal();
            }
            // fall through
          case 82: break;
          case 36:
            { System.out.printf("%s ",yytext()); return tokens.t_break.ordinal();
            }
            // fall through
          case 83: break;
          case 37:
            { System.out.printf("%s ",yytext()); return tokens.t_class.ordinal();
            }
            // fall through
          case 84: break;
          case 38:
            { System.out.printf("%s ",yytext()); return tokens.t_while.ordinal();
            }
            // fall through
          case 85: break;
          case 39:
            { System.out.printf("%s ",yytext()); return tokens.t_double.ordinal();
            }
            // fall through
          case 86: break;
          case 40:
            { System.out.printf("%s ",yytext()); return tokens.t_readln.ordinal();
            }
            // fall through
          case 87: break;
          case 41:
            { System.out.printf("%s ",yytext()); return tokens.t_return.ordinal();
            }
            // fall through
          case 88: break;
          case 42:
            { System.out.printf("%s ",yytext()); return tokens.t_string.ordinal();
            }
            // fall through
          case 89: break;
          case 43:
            { System.out.printf("%s ",yytext()); return tokens.t_extends.ordinal();
            }
            // fall through
          case 90: break;
          case 44:
            { System.out.printf("%s ",yytext()); return tokens.t_println.ordinal();
            }
            // fall through
          case 91: break;
          case 45:
            { System.out.printf("%s ",yytext()); return tokens.t_newarray.ordinal();
            }
            // fall through
          case 92: break;
          case 46:
            { System.out.printf("%s ",yytext()); return tokens.t_interface.ordinal();
            }
            // fall through
          case 93: break;
          case 47:
            { System.out.printf("%s ",yytext()); return tokens.t_implements.ordinal();
            }
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
